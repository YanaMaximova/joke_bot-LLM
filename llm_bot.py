import telebot
from telebot import types
from model_wrapper import ModelWrapper


TOKEN = "..."
bot = telebot.TeleBot(TOKEN)

model_wrapper = ModelWrapper()


def main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        types.KeyboardButton("üìú –ü–æ–º–æ—â—å"),
        types.KeyboardButton("ü§ñ –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å"),
        types.KeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–¥–µ–ª—å"),
        types.KeyboardButton("‚úç –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç")
    ]
    markup.add(*buttons)
    return markup


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –†–∞–¥–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –º–æ–µ–º –±–æ—Ç–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à—É—Ç–æ–∫. "
        "–ò–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —É–∂–µ –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ —à—É—Ç–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–±–∏–¥–Ω—ã–º–∏, –Ω–µ—Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω—ã–º–∏, "
        "–Ω–µ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–≤–æ–µ–π –∂–∏–∑–Ω–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π –∏–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ –ø–æ–ª—É—á–∞—Ç—å—Å—è. "
        "–¢–∞–∫–æ–≤–∞ –∏—Ö —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞, –∏ —è –∑–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–µ—Å—É. "
        "–ï—Å–ª–∏ —Ç—ã —Å —ç—Ç–∏–º —Å–æ–≥–ª–∞—Å–µ–Ω, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ, –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º! üöÄ",
        reply_markup=main_menu()
    )


@bot.message_handler(func=lambda message: message.text == "üìú –ü–æ–º–æ—â—å")
def help_command(message):
    help_message = """–î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:
üìú –ü–æ–º–æ—â—å ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
ü§ñ –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ StatLM
‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–¥–µ–ª—å ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ –º–æ–¥–µ–ª—å
‚úç –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç ‚Äî —Å–æ–∑–¥–∞—Ç—å —à—É—Ç–∫—É –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
"""
    bot.send_message(message.chat.id, help_message)


@bot.message_handler(func=lambda message: message.text == "ü§ñ –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å")
def model_command(message):
    """–°—Ä–∞–∑—É –∑–∞–≥—Ä—É–∂–∞–µ–º StatLM –±–µ–∑ –≤—ã–±–æ—Ä–∞"""
    bot.send_message(message.chat.id, "–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å StatLM... ‚è≥")
    
    if model_wrapper:
        status, result = model_wrapper.load("StatLM", test_inference=True)
        if status:
            bot.send_message(message.chat.id, "‚úÖ StatLM —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!", reply_markup=main_menu())
        else:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏:\n{result}")
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")


@bot.message_handler(func=lambda message: message.text == "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–¥–µ–ª—å")
def check_model_command(message):
    if model_wrapper:
        bot.send_message(message.chat.id, f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {str(model_wrapper.current_model_name)}")
    else:
        bot.send_message(message.chat.id, "–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")


@bot.message_handler(func=lambda message: message.text == "‚úç –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç")
def generate_command(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è)"""
    print(f'New message <{message.text}>')

    if model_wrapper:
        status, result = model_wrapper.generate(message.text)
        if status:
            bot.send_message(message.chat.id, result, reply_markup=main_menu())
        else:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n{result}")
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")


bot.polling(none_stop=True, interval=0)
